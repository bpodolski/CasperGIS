/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.bpodolski.caspergis.ext.gdal;

import io.github.bpodolski.caspergis.api.CasperInfo;
import io.github.bpodolski.caspergis.utils.SystemFileView;
import java.awt.Color;
import java.io.File;
import javax.swing.JFileChooser;
import org.openide.util.NbPreferences;

final class GDALPanel extends javax.swing.JPanel {

    private final GDALOptionsPanelController controller;

    private File fActualDir;
    private File fTool1 = null;
    private String sToolPath1 = "";
    private File fTool2 = null;
    private String sToolPath2 = "";

    GDALPanel(GDALOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnToolPath1 = new javax.swing.JButton();
        edtToolPath1 = new javax.swing.JTextField();
        btnToolPath2 = new javax.swing.JButton();
        edtToolPath2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        btnToolPath1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/github/bpodolski/caspergis/ext/gdal/open.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnToolPath1, org.openide.util.NbBundle.getMessage(GDALPanel.class, "GDALPanel.btnToolPath1.text")); // NOI18N
        btnToolPath1.setToolTipText(org.openide.util.NbBundle.getMessage(GDALPanel.class, "GDALPanel.btnToolPath1.toolTipText")); // NOI18N
        btnToolPath1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToolPath1ActionPerformed(evt);
            }
        });

        edtToolPath1.setEditable(false);
        edtToolPath1.setBackground(new java.awt.Color(255, 255, 255));
        edtToolPath1.setText(org.openide.util.NbBundle.getMessage(GDALPanel.class, "GDALPanel.edtToolPath1.text")); // NOI18N
        edtToolPath1.setMinimumSize(new java.awt.Dimension(6, 16));
        edtToolPath1.setPreferredSize(new java.awt.Dimension(59, 16));

        btnToolPath2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/github/bpodolski/caspergis/ext/gdal/open.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnToolPath2, org.openide.util.NbBundle.getMessage(GDALPanel.class, "GDALPanel.btnToolPath2.text")); // NOI18N
        btnToolPath2.setToolTipText(org.openide.util.NbBundle.getMessage(GDALPanel.class, "GDALPanel.btnToolPath2.toolTipText")); // NOI18N
        btnToolPath2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToolPath2ActionPerformed(evt);
            }
        });

        edtToolPath2.setEditable(false);
        edtToolPath2.setBackground(new java.awt.Color(255, 255, 255));
        edtToolPath2.setText(org.openide.util.NbBundle.getMessage(GDALPanel.class, "GDALPanel.edtToolPath2.text")); // NOI18N
        edtToolPath2.setMinimumSize(new java.awt.Dimension(6, 16));
        edtToolPath2.setPreferredSize(new java.awt.Dimension(59, 16));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(GDALPanel.class, "GDALPanel.jLabel1.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(GDALPanel.class, "GDALPanel.jLabel2.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnToolPath1, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtToolPath1, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnToolPath2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtToolPath2, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnToolPath1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(edtToolPath1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnToolPath2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(edtToolPath2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnToolPath1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolPath1ActionPerformed
        javax.swing.JFileChooser dlg = new JFileChooser();
        dlg.setFileSelectionMode(JFileChooser.FILES_ONLY);
        dlg.setMultiSelectionEnabled(false);
        dlg.setFileView(new SystemFileView());

        dlg.setCurrentDirectory(fActualDir);
        int returnVal = dlg.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            fActualDir = dlg.getSelectedFile();
            setToolPath1(fActualDir.getAbsolutePath());
        }
    }//GEN-LAST:event_btnToolPath1ActionPerformed

    private void btnToolPath2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolPath2ActionPerformed
       javax.swing.JFileChooser dlg = new JFileChooser();
        dlg.setFileSelectionMode(JFileChooser.FILES_ONLY);
        dlg.setMultiSelectionEnabled(false);
        dlg.setFileView(new SystemFileView());

        dlg.setCurrentDirectory(fActualDir);
        int returnVal = dlg.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            fActualDir = dlg.getSelectedFile();
            setToolPath2(fActualDir.getAbsolutePath());
        }
    }//GEN-LAST:event_btnToolPath2ActionPerformed

    void load() {
        this.fActualDir = new File(NbPreferences.forModule(GDALPanel.class).get("ActualDir", ""));

        this.setToolPath1(NbPreferences.forModule(CasperInfo.class).get(CasperInfo.EXT_TOOL_GDALTRANSLATE, ""));
        this.setToolPath2(NbPreferences.forModule(CasperInfo.class).get(CasperInfo.EXT_TOOL_GDALOGR2OGR, ""));
    }

    void store() {
         if (this.fActualDir != null) {
            NbPreferences.forModule(GDALPanel.class).put("ActualDir", this.fActualDir.getAbsolutePath());
        }
        if (this.fTool1 != null) {
            NbPreferences.forModule(CasperInfo.class).put(CasperInfo.EXT_TOOL_GDALTRANSLATE, this.fTool1.getAbsolutePath());
        }
        if (this.fTool2 != null) {
            NbPreferences.forModule(CasperInfo.class).put(CasperInfo.EXT_TOOL_GDALOGR2OGR, this.fTool2.getAbsolutePath());
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnToolPath1;
    private javax.swing.JButton btnToolPath2;
    private javax.swing.JTextField edtToolPath1;
    private javax.swing.JTextField edtToolPath2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables

    private void setToolPath1(String sToolPath) {
        if (checkToolPath1(sToolPath)) {
            this.sToolPath1 = sToolPath;
            this.fTool1 = new File(this.sToolPath1);
            this.edtToolPath1.setText(sToolPath);
            this.edtToolPath1.setForeground(Color.BLACK);
            this.fActualDir = fTool1.getParentFile();
        } else {
            this.sToolPath1 = sToolPath;
            this.fTool1 = null;
            this.edtToolPath1.setText("[no tool]");
            this.edtToolPath1.setForeground(Color.RED);
        }

    }

    private boolean checkToolPath1(String sToolPath) {
        boolean isOK = false;
        if (!sToolPath.equals("")) {
            File f = new File(sToolPath);
            if (f.isFile() && f.exists()) {
                isOK = f.getAbsolutePath().toLowerCase().contains("gdal_translate");
            }

        }
        return isOK;
    }

    private void setToolPath2(String sToolPath) {
        if (checkToolPath2(sToolPath)) {
            this.sToolPath2 = sToolPath;
            this.fTool2 = new File(this.sToolPath2);
            this.edtToolPath2.setText(sToolPath);
            this.edtToolPath2.setForeground(Color.BLACK);
            this.fActualDir = fTool2.getParentFile();
        } else {
            this.sToolPath2 = sToolPath;
            this.fTool2 = null;
            this.edtToolPath2.setText("[no tool]");
            this.edtToolPath2.setForeground(Color.RED);
        }

    }

    private boolean checkToolPath2(String sToolPath) {
        boolean isOK = false;
        if (!sToolPath.equals("")) {
            File f = new File(sToolPath);
            if (f.isFile() && f.exists()) {
                isOK = f.getAbsolutePath().toLowerCase().contains("ogr2ogr");
            }

        }
        return isOK;
    }

}
