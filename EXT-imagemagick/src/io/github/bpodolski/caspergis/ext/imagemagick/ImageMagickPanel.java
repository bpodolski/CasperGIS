/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.bpodolski.caspergis.ext.imagemagick;

import io.github.bpodolski.caspergis.api.CasperInfo;
import io.github.bpodolski.caspergis.utils.SystemFileView;
import java.awt.Color;
import java.io.File;
import javax.swing.JFileChooser;
import org.openide.util.NbPreferences;

final class ImageMagickPanel extends javax.swing.JPanel {

    private final ImageMagickOptionsPanelController controller;
    private File fActualDir;
    private File fTool = null;
    private String sToolPath = "";

    ImageMagickPanel(ImageMagickOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        // TODO listen to changes in form fields and call controller.changed()
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnToolPath = new javax.swing.JButton();
        edtToolPath = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();

        btnToolPath.setIcon(new javax.swing.ImageIcon(getClass().getResource("/io/github/bpodolski/caspergis/ext/imagemagick/open.png"))); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnToolPath, org.openide.util.NbBundle.getMessage(ImageMagickPanel.class, "ImageMagickPanel.btnToolPath.text")); // NOI18N
        btnToolPath.setToolTipText(org.openide.util.NbBundle.getMessage(ImageMagickPanel.class, "ImageMagickPanel.btnToolPath.toolTipText")); // NOI18N
        btnToolPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnToolPathActionPerformed(evt);
            }
        });

        edtToolPath.setEditable(false);
        edtToolPath.setBackground(new java.awt.Color(255, 255, 255));
        edtToolPath.setText(org.openide.util.NbBundle.getMessage(ImageMagickPanel.class, "ImageMagickPanel.edtToolPath.text")); // NOI18N
        edtToolPath.setMinimumSize(new java.awt.Dimension(6, 16));
        edtToolPath.setPreferredSize(new java.awt.Dimension(59, 16));

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ImageMagickPanel.class, "ImageMagickPanel.jLabel1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnToolPath, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edtToolPath, javax.swing.GroupLayout.DEFAULT_SIZE, 486, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnToolPath, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(edtToolPath, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(107, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnToolPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnToolPathActionPerformed
        javax.swing.JFileChooser dlg = new JFileChooser();

        dlg.setFileSelectionMode(JFileChooser.FILES_ONLY);
        dlg.setMultiSelectionEnabled(false);
        dlg.setFileView(new SystemFileView());

        dlg.setCurrentDirectory(fActualDir);
        int returnVal = dlg.showOpenDialog(this);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            fActualDir = dlg.getSelectedFile();
            setToolPath(fActualDir.getAbsolutePath());
        }
    }//GEN-LAST:event_btnToolPathActionPerformed

    void load() {
        this.fActualDir = new File(NbPreferences.forModule(ImageMagickPanel.class).get("ActualDir", ""));

        this.setToolPath(NbPreferences.forModule(CasperInfo.class).get(CasperInfo.EXT_TOOL_IMGCONVERT, ""));
    }

    void store() {
        if (this.fActualDir != null) {
            NbPreferences.forModule(ImageMagickPanel.class).put("ActualDir", this.fActualDir.getAbsolutePath());
        }
        if (this.fTool != null) {
            NbPreferences.forModule(CasperInfo.class).put(CasperInfo.EXT_TOOL_IMGCONVERT, this.fTool.getAbsolutePath());
        }
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnToolPath;
    private javax.swing.JTextField edtToolPath;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private void setToolPath(String sToolPath) {
        if (checkToolPath(sToolPath)) {
            this.sToolPath = sToolPath;
            this.fTool = new File(this.sToolPath);
            this.edtToolPath.setText(sToolPath);
            this.edtToolPath.setForeground(Color.BLACK);
            this.fActualDir = fTool.getParentFile();
        } else {
            this.sToolPath = sToolPath;
            this.fTool = null;
            this.edtToolPath.setText("[no tool]");
            this.edtToolPath.setForeground(Color.RED);
        }

    }

    private boolean checkToolPath(String sToolPath) {
        boolean isOK = false;
        if (!sToolPath.equals("")) {
            File f = new File(sToolPath);
            if (f.isFile() && f.exists()) {
                isOK = f.getAbsolutePath().toLowerCase().contains("convert");
            }
        
    }
    return isOK ;
}

}
