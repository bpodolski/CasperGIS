/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.bpodolski.caspergis.gui;

import io.github.bpodolski.caspergis.services.MapExplorerManagerMgr;
import java.util.Collection;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;
import org.openide.util.lookup.Lookups;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//io.github.bpodolski.caspergis.gui//StartPage//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "StartPageTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "editor", openAtStartup = true)
@ActionID(category = "Window", id = "io.github.bpodolski.caspergis.gui.StartPageTopComponent")
@ActionReference(path = "Menu/Help", position = 100)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_StartPageAction",
        preferredID = "StartPageTopComponent"
)
@Messages({
    "CTL_StartPageAction=StartPage",
    "CTL_StartPageTopComponent=StartPage Window",
    "HINT_StartPageTopComponent=This is a StartPage window"
})
public final class StartPageTopComponent extends TopComponent implements  ChangeListener  {

    //Serwis 
    MapExplorerManagerMgr explorerManagerMgr;

    public StartPageTopComponent() {
        initComponents();
        setName(Bundle.CTL_StartPageTopComponent());
        setToolTipText(Bundle.HINT_StartPageTopComponent());

        Collection<? extends MapExplorerManagerMgr> srvMapExp = Lookups.forPath("Core").lookupAll(MapExplorerManagerMgr.class);
        if (srvMapExp.iterator().hasNext()) {
            this.explorerManagerMgr = srvMapExp.iterator().next();
        } else {
            this.explorerManagerMgr = MapExplorerManagerMgr.getDefault();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cbShowOnStart = new javax.swing.JCheckBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt = new javax.swing.JTextArea();

        cbShowOnStart.setSelected(true);
        org.openide.awt.Mnemonics.setLocalizedText(cbShowOnStart, org.openide.util.NbBundle.getMessage(StartPageTopComponent.class, "StartPageTopComponent.cbShowOnStart.text")); // NOI18N
        cbShowOnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbShowOnStartActionPerformed(evt);
            }
        });

        txt.setColumns(20);
        txt.setRows(5);
        jScrollPane1.setViewportView(txt);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 503, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbShowOnStart)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(cbShowOnStart)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cbShowOnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbShowOnStartActionPerformed
        if (this.cbShowOnStart.isSelected()) {
            NbPreferences.forModule(StartPageTopComponent.class).put("isStartPage", "T");
        } else {
            NbPreferences.forModule(StartPageTopComponent.class).put("isStartPage", "N");
        }
    }//GEN-LAST:event_cbShowOnStartActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox cbShowOnStart;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txt;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        this.cbShowOnStart.setSelected(NbPreferences.forModule(StartPageTopComponent.class).get("isStartPage", "").toUpperCase().equals("T"));
    }

    @Override
    public void componentClosed() {
        if (this.cbShowOnStart.isSelected()) {
            NbPreferences.forModule(StartPageTopComponent.class).put("isStartPage", "T");
        } else {
            NbPreferences.forModule(StartPageTopComponent.class).put("isStartPage", "N");
        }

    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        txt.setText("");
    }
}
