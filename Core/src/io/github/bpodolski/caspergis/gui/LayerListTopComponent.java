/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.bpodolski.caspergis.gui;

import io.github.bpodolski.caspergis.CgRegistry;
import io.github.bpodolski.caspergis.beans.LayerBean;
import io.github.bpodolski.caspergis.beans.MapBean;
import io.github.bpodolski.caspergis.gui.nodes.InternalMapNode;
import java.beans.IntrospectionException;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.UUID;
import javax.swing.ActionMap;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.actions.CopyAction;
import org.openide.actions.CutAction;
import org.openide.actions.DeleteAction;
import org.openide.actions.PasteAction;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.nodes.BeanNode;
import org.openide.nodes.Node;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import org.openide.util.LookupEvent;
import org.openide.util.LookupListener;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.Utilities;
import org.openide.util.actions.SystemAction;
import org.openide.util.lookup.ProxyLookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//io.github.bpodolski.caspergis.gui//LayerList//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "LayerListTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "io.github.bpodolski.caspergis.gui.LayerListTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_LayerListAction",
        preferredID = "LayerListTopComponent"
)
@Messages({
    "CTL_LayerListAction=LayerList",
    "CTL_LayerListTopComponent=LayerList Window",
    "HINT_LayerListTopComponent=This is a LayerList window"
})
public final class LayerListTopComponent extends TopComponent implements ExplorerManager.Provider,
        LookupListener {

    private MapBean mapBean = null;
    private Lookup.Result<MapBean> result = null;
    private ExplorerManager mgr = new ExplorerManager();

    Lookup lookupMapBean = null;
    Lookup lookupAction = null;
    ProxyLookup proxyLookup;

    public LayerListTopComponent() {
        initComponents();
        setName(Bundle.CTL_LayerListTopComponent());
        setToolTipText(Bundle.HINT_LayerListTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);

        initView();
        initActions();

        associateLookup(this.lookupAction);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pnl = new javax.swing.JPanel();
        btnAddLayer = new javax.swing.JButton();
        lbl = new javax.swing.JLabel();
        view = new org.openide.explorer.view.BeanTreeView();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(LayerListTopComponent.class, "LayerListTopComponent.jLabel1.text")); // NOI18N

        setLayout(new java.awt.BorderLayout());

        pnl.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        pnl.setPreferredSize(new java.awt.Dimension(10, 26));
        pnl.setLayout(new javax.swing.BoxLayout(pnl, javax.swing.BoxLayout.LINE_AXIS));

        btnAddLayer.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnAddLayer, org.openide.util.NbBundle.getMessage(LayerListTopComponent.class, "LayerListTopComponent.btnAddLayer.text")); // NOI18N
        btnAddLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLayerActionPerformed(evt);
            }
        });
        pnl.add(btnAddLayer);

        org.openide.awt.Mnemonics.setLocalizedText(lbl, org.openide.util.NbBundle.getMessage(LayerListTopComponent.class, "LayerListTopComponent.lbl.text")); // NOI18N
        pnl.add(lbl);

        add(pnl, java.awt.BorderLayout.NORTH);
        add(view, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLayerActionPerformed
        InternalMapNode mn = (InternalMapNode) mgr.getRootContext();

        var chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        chooser.setFileFilter(new FileNameExtensionFilter("SHP files", "shp", "shp"));
        chooser.setAcceptAllFileFilterUsed(false);
        chooser.setMultiSelectionEnabled(true);
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            var files = chooser.getSelectedFiles();
            for (int i = 0; i < files.length; i++) {
                var f = files[i];
                var lb = new LayerBean(f.getName());
                try {
                    lb.setConnectionStr(f.getCanonicalPath());
                } catch (IOException ex) {
                    Exceptions.printStackTrace(ex);
                }
                mn.getFactory().add(lb);
            }
        }


    }//GEN-LAST:event_btnAddLayerActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddLayer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lbl;
    private javax.swing.JPanel pnl;
    private org.openide.explorer.view.BeanTreeView view;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        result = Utilities.actionsGlobalContext().lookupResult(MapBean.class);
        result.addLookupListener(this);
    }

    @Override
    public void componentClosed() {
        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    public void setExplorerManager(ExplorerManager mgr) {
        this.mgr = mgr;
        initActions();
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }

    private void initView() {
        Node rootNode;
        try {
            rootNode = new BeanNode("[..]");
            rootNode.setName("[..]");
            mgr.setRootContext(rootNode);
        } catch (IntrospectionException ex) {
            Exceptions.printStackTrace(ex);
        }

    }

    @Override
    public void resultChanged(LookupEvent ev) {
        Collection<? extends MapBean> allRegistryMapBeans = result.allInstances();
        if (!allRegistryMapBeans.isEmpty()) {
            MapBean reg = allRegistryMapBeans.iterator().next();
            if (reg != mapBean) {
                if (reg.isActive()) {
                    mapBean = reg;
                    lbl.setText(mapBean.getName());

                    if (CgRegistry.explorerManagerMap.get(mapBean) != null) {
                        this.setExplorerManager((ExplorerManager) CgRegistry.explorerManagerMap.get(mapBean));
                    }

                    view.addNotify();
                } else {
                    lbl.setText("[no selection]");
                }
            }
        } else if (mapBean != null) {
            lbl.setText(mapBean.getName());
        } else {
            lbl.setText("[no selection]");
        }
    }

    private void initActions() {

        ActionMap map = this.getActionMap();

        CutAction cut = SystemAction.get(CutAction.class);
        getActionMap().put(cut.getActionMapKey(), ExplorerUtils.actionCut(mgr));

        CopyAction copy = SystemAction.get(CopyAction.class);
        getActionMap().put(copy.getActionMapKey(), ExplorerUtils.actionCopy(mgr));

        PasteAction paste = SystemAction.get(PasteAction.class);
        getActionMap().put(paste.getActionMapKey(), ExplorerUtils.actionPaste(mgr));

        DeleteAction delete = SystemAction.get(DeleteAction.class);
        getActionMap().put(delete.getActionMapKey(), ExplorerUtils.actionDelete(mgr, true));

        this.lookupAction = ExplorerUtils.createLookup(mgr, map);
    }

}
