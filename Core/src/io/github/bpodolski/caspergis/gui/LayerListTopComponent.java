/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.bpodolski.caspergis.gui;

import io.github.bpodolski.caspergis.beans.LayerBean;
import io.github.bpodolski.caspergis.beans.MapBean;
import io.github.bpodolski.caspergis.gui.nodes.InternalMapNode;
import io.github.bpodolski.caspergis.gui.nodes.factories.MapitemsFactory;
import io.github.bpodolski.caspergis.services.MapExplorerManagerMgr;
import io.github.bpodolski.caspergis.services.MapitemListMgr;
import io.github.bpodolski.caspergis.utils.LayerFileFilter;
import java.io.File;
import javax.swing.Action;
import javax.swing.ActionMap;
import javax.swing.JFileChooser;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.actions.CopyAction;
import org.openide.actions.CutAction;
import org.openide.actions.DeleteAction;
import org.openide.actions.PasteAction;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.awt.Actions;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.util.Lookup;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.actions.SystemAction;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//io.github.bpodolski.caspergis.gui//LayerList//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "LayerListTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "io.github.bpodolski.caspergis.gui.LayerListTopComponent")
@ActionReference(path = "Menu/Window" /*, position = 333 */)
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_LayerListAction",
        preferredID = "LayerListTopComponent"
)
@Messages({
    "CTL_LayerListAction=LayerList",
    "CTL_LayerListTopComponent=LayerList Window",
    "HINT_LayerListTopComponent=This is a LayerList window"
})
public final class LayerListTopComponent extends TopComponent implements ExplorerManager.Provider,
        /*LookupListener,*/ ChangeListener {

    private MapBean mapBean = null;
    private final MapBean mapBeanX = new MapBean(null, "[No active map]");
    private ExplorerManager explorerManagerX = new ExplorerManager();
    private MapExplorerManagerMgr explorerManagerMgr = Lookups.forPath("Core").lookupAll(MapExplorerManagerMgr.class).iterator().next();

    Lookup lookupMapBean = null;
    Lookup lookupAction = null;
    ProxyLookup proxyLookup;

    InstanceContent instanceContent = new InstanceContent();
    
    Action actAddLayer = Actions.forID("Map", "io.github.bpodolski.caspergis.project.map.AddLayer");
    Action actMapProperties = Actions.forID("Map", "io.github.bpodolski.caspergis.project.map.MapProperties");
    Action actSaveMap = Actions.forID("Map", "io.github.bpodolski.caspergis.project.map.SaveMap");

    public LayerListTopComponent() {
        initComponents();

        setName(Bundle.CTL_LayerListTopComponent());
        setToolTipText(Bundle.HINT_LayerListTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);

        mapBean = mapBeanX;
        instanceContent.add(mapBean);

        initActions();

        proxyLookup = new ProxyLookup(lookupAction, (new AbstractLookup(this.instanceContent)));
        associateLookup(this.proxyLookup);

        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pnl = new javax.swing.JPanel();
        btnAddLayer = new javax.swing.JButton();
        btnSaveMap = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        btnProperties = new javax.swing.JButton();
        view = new org.openide.explorer.view.BeanTreeView();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(LayerListTopComponent.class, "LayerListTopComponent.jLabel1.text")); // NOI18N

        setLayout(new java.awt.BorderLayout());

        pnl.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        pnl.setPreferredSize(new java.awt.Dimension(10, 26));
        pnl.setLayout(new javax.swing.BoxLayout(pnl, javax.swing.BoxLayout.LINE_AXIS));

        btnAddLayer.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        org.openide.awt.Mnemonics.setLocalizedText(btnAddLayer, org.openide.util.NbBundle.getMessage(LayerListTopComponent.class, "LayerListTopComponent.btnAddLayer.text")); // NOI18N
        btnAddLayer.setToolTipText(org.openide.util.NbBundle.getMessage(LayerListTopComponent.class, "LayerListTopComponent.btnAddLayer.toolTipText")); // NOI18N
        btnAddLayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLayerActionPerformed(evt);
            }
        });
        pnl.add(btnAddLayer);

        org.openide.awt.Mnemonics.setLocalizedText(btnSaveMap, org.openide.util.NbBundle.getMessage(LayerListTopComponent.class, "LayerListTopComponent.btnSaveMap.text")); // NOI18N
        btnSaveMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveMapActionPerformed(evt);
            }
        });
        pnl.add(btnSaveMap);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        pnl.add(jSeparator1);

        org.openide.awt.Mnemonics.setLocalizedText(btnProperties, org.openide.util.NbBundle.getMessage(LayerListTopComponent.class, "LayerListTopComponent.btnProperties.text")); // NOI18N
        btnProperties.setToolTipText(org.openide.util.NbBundle.getMessage(LayerListTopComponent.class, "LayerListTopComponent.btnProperties.toolTipText")); // NOI18N
        btnProperties.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPropertiesActionPerformed(evt);
            }
        });
        pnl.add(btnProperties);

        add(pnl, java.awt.BorderLayout.NORTH);

        view.setRootVisible(false);
        add(view, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddLayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLayerActionPerformed
        this.actAddLayer.actionPerformed(null);
    }//GEN-LAST:event_btnAddLayerActionPerformed

    private void btnPropertiesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPropertiesActionPerformed
        this.actMapProperties.actionPerformed(null);
    }//GEN-LAST:event_btnPropertiesActionPerformed

    private void btnSaveMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveMapActionPerformed
        this.actSaveMap.actionPerformed(null);
    }//GEN-LAST:event_btnSaveMapActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddLayer;
    private javax.swing.JButton btnProperties;
    private javax.swing.JButton btnSaveMap;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel pnl;
    private org.openide.explorer.view.BeanTreeView view;
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        explorerManagerMgr.addMapExplorerManager(mapBean);
        explorerManagerMgr.addChangeListener(this);
        initActions();
    }

    @Override
    public void componentClosed() {
//        result.removeLookupListener(this);
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        if (this.explorerManagerMgr != null) {
            return this.explorerManagerMgr.getMapExplorerManager(mapBean);
        }
        return explorerManagerX;
    }

    private void initActions() {

        ActionMap map = this.getActionMap();
        ExplorerManager mgr = this.getExplorerManager();

        CutAction cut = SystemAction.get(CutAction.class);

        getActionMap().put(cut.getActionMapKey(), ExplorerUtils.actionCut(mgr));

        CopyAction copy = SystemAction.get(CopyAction.class);
        getActionMap().put(copy.getActionMapKey(), ExplorerUtils.actionCopy(mgr));

        PasteAction paste = SystemAction.get(PasteAction.class);
        getActionMap().put(paste.getActionMapKey(), ExplorerUtils.actionPaste(mgr));

        DeleteAction delete = SystemAction.get(DeleteAction.class);
        getActionMap().put(delete.getActionMapKey(), ExplorerUtils.actionDelete(mgr, true));

        this.lookupAction = ExplorerUtils.createLookup(mgr, map);

    }

    @Override
    public void stateChanged(ChangeEvent evt) {

        setActiveMapBean();
    }

    private void setActiveMapBean() {

        if (this.explorerManagerMgr.getActiveMapBean() != null) {
            instanceContent.remove(mapBean);
            this.mapBean = this.explorerManagerMgr.getActiveMapBean();
            instanceContent.add(this.mapBean);
            initActions();
        } else {
            this.mapBean = this.mapBeanX;
        }
        view.addNotify();
    }

}
