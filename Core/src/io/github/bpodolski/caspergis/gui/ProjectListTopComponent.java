/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package io.github.bpodolski.caspergis.gui;

import io.github.bpodolski.caspergis.gui.nodes.factories.SystemFactory;
import java.awt.BorderLayout;
import java.beans.IntrospectionException;
import java.beans.PropertyVetoException;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.actions.CopyAction;
import org.openide.actions.CutAction;
import org.openide.actions.DeleteAction;
import org.openide.actions.PasteAction;
import org.openide.awt.ActionID;
import org.openide.awt.ActionReference;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.ListView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.actions.SystemAction;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//io.github.bpodolski.caspergis.gui//ProjectList//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "ProjectListTopComponent",
        //iconBase="SET/PATH/TO/ICON/HERE",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
@ActionID(category = "Window", id = "io.github.bpodolski.caspergis.gui.ProjectListTopComponent")
@ActionReference(path = "Menu/Window" , position = 313 )
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_ProjectListAction",
        preferredID = "ProjectListTopComponent"
)
@Messages({
    "CTL_ProjectListAction=ProjectList",
    "CTL_ProjectListTopComponent=ProjectList Window",
    "HINT_ProjectListTopComponent=This is a ProjectList window"
})
public final class ProjectListTopComponent extends TopComponent  implements ExplorerManager.Provider {

        private final ExplorerManager mgr = new ExplorerManager();
//    OutlineView view = new OutlineView();
    ListView view = new ListView();
    
    public ProjectListTopComponent() throws IntrospectionException, PropertyVetoException {
        initComponents();
        setName(Bundle.CTL_ProjectListTopComponent());
        setToolTipText(Bundle.HINT_ProjectListTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);

         this.add(view, BorderLayout.CENTER);

        initActions();
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
        initView();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
       return mgr; //To change body of generated methods, choose Tools | Templates.
    }

    private void initActions() {
           CutAction cut = SystemAction.get(CutAction.class);
        getActionMap().put(cut.getActionMapKey(), ExplorerUtils.actionCut(mgr));
        
        CopyAction copy = SystemAction.get(CopyAction.class);
        getActionMap().put(copy.getActionMapKey(), ExplorerUtils.actionCopy(mgr));
        
        PasteAction paste = SystemAction.get(PasteAction.class);
        getActionMap().put(paste.getActionMapKey(), ExplorerUtils.actionPaste(mgr));
        
        DeleteAction delete = SystemAction.get(DeleteAction.class);
        getActionMap().put(delete.getActionMapKey(), ExplorerUtils.actionDelete(mgr, true));
    }
    
      public void initView() throws IntrospectionException, PropertyVetoException {
        
        Children sysChildren = Children.create(new SystemFactory(), true);
        Node rootNode = new AbstractNode(sysChildren);
        rootNode.setDisplayName("System");
        mgr.setRootContext(rootNode);
        rootNode.setPreferred(false);
        view.setShowParentNode(false);
        
    }
}
